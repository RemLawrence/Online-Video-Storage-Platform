swagger: "2.0"
info:
  description: This is an API for Video Storage Platform
  version: '1.0'
  title: Video Storage API
  contact:
    email: hwang27@unb.ca
  license:
    name: Apache 2.0
    url: 'http://www.apache.org/licenses/LICENSE-2.0.html'
tags:
  - name: user
    description: "The user in video storage platform"
  - name: video
    description: "The video in video storage platform"
  - name: videolist
    description: "The videolist in video storage platform"
paths:
  /signin:
    post:
      tags:
      - "user"
      summary: "Logs user into the system"
      description: ""
      operationId: "loginUser"
      parameters:
      - name: "userName"
        in: "query"
        description: "The user name for login"
        required: true
        type: "string"
      - name: "password"
        in: "query"
        description: "The password for login in clear text"
        required: true
        type: "string"
      responses:
        '200':
          description: "successful logged in, session created"
        "400":
          description: "Bad Request"
        "401":
          description: "Username or password not correct"
    get:
      tags:
        - "user"
      summary: "Check if the user is logged in"
      description: ""
      operationId: ""
      responses:
        '200':
          description: "User is in session"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/User'
        "401":
          description: "Current user is not in the session"
      security:
      - session_cookie: []
    delete:
      tags: 
        - "user"
      summary: "Delete session, logout user"
      description: "logout user"
      operationId: ""
      responses:
        '200':
          description: "User successfully logged out"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/User'
        "401":
          description: "Current user is not in the session"
      security:
      - session_cookie: []
  /user:
    post:
      tags:
      - "user"
      summary: "createUser"
      description: "Create a new user"
      operationId: "createUser"
      parameters:
      - in: "body"
        name: "body"
        description: "Created user object"
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        '200':
          description: "created"
        "400":
          description: "Bad Request"
          
  /user/{username}:
    get:
      tags:
        - "user"
      summary: "Get user by username"
      description: ""
      operationId: "getUserByName"
      parameters:
        - in: "path"
          name: "username"
          description: "The name that needs to be fetched."
          required: true
          type: "string"
      responses:
        '200':
          description: "search results matching criteria"
          schema:
            items:
              $ref: '#/definitions/User'
        '400':
          description: "bad input parameter"
        '404':
          description: "user does not exist"
    put:
      deprecated: true
      tags:
        - "user"
      summary: "Update the info of an existing user providing username"
      description: "This can only be done by the logged in user."
      operationId: "updateUserByName"
      parameters:
      - name: "username"
        in: "path"
        description: "User name that need to be updated"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Update user object"
        required: true
        schema:
          $ref: '#/definitions/User'
      responses:
        '200':
          description: "search results matching criteria"
          schema:
            items:
              $ref: '#/definitions/User'
        "400":
          description: "Invalid username supplied"
        "401":
          description: "Unauthurized request"
        "404":
          description: "User not found"
      security:
      - session_cookie: []
    delete:
      deprecated: true
      tags:
      - "user"
      summary: "Deletes a user"
      description: ""
      operationId: "delUserByName"
      parameters:
      - name: "username"
        in: "path"
        description: "User Name"
        required: true
        type: "string"
      responses:
        '200':
          description: "search results matching criteria"
          schema:
            items:
              $ref: '#/definitions/User'
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthurized request"
        "404":
          description: "User not found"
      security:
      - session_cookie: []




  /user/{username}/video:
    post:
      tags:
      - "video"
      summary: "Create a video for a specific user"
      description: "Create a video for a specific user"
      operationId: "createVideo"
      parameters:
        - in: "path"
          name: "username"
          description: "The name that needs to be fetched."
          required: true
          type: "integer"
        - in: "body"
          name: "body"
          description: "Created user object"
          required: true
          schema:
            $ref: '#/definitions/Video'
      responses:
        '201':
          description: "created"
          schema:
            items:
              $ref: '#/definitions/Video'
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthurized request"
      security:
        - session_cookie: []
    get:
      tags:
      - "video"
      summary: "Get all videos of a user"
      description: "Returns all the videos this user has"
      operationId: "getUserVideo"
      parameters:
      - name: "username"
        in: "path"
        description: "User Name"
        required: true
        type: "string"
      responses:
        '200':
          description: "search results matching criteria"
          schema:
            type: "array"
            items:
              $ref: '#/definitions/Video'
        "400":
          description: "Bad Request"
        "404":
          description: "Video not found"
    
  /user/{username}/video/{videoId}:
    get:
      deprecated: true
      tags:
      - "video"
      summary: "Find video by ID"
      description: "Returns a single video"
      operationId: "getVideoById"
      parameters:
      - name: "username"
        in: "path"
        description: "User name"
        required: true
        type: "string"
      - name: "videoId"
        in: "path"
        description: "Video id to get"
        required: true
        type: "string"
      responses:
        '200':
          description: "search results matching criteria"
          schema:
            items:
              $ref: '#/definitions/Video'
        "400":
          description: "Bad Request"
        "404":
          description: "User or Video not found"
    put:
      deprecated: true
      tags:
      - "video"
      summary: "Update the likes of a spefiic video"
      description: ""
      operationId: "updateVideoLikes"
      parameters:
      - name: "username"
        in: "path"
        description: "User id"
        required: true
        type: "string"
      - name: "videoId"
        in: "path"
        description: "Video id to delete"
        required: true
        type: "string"
      - name: "likes"
        in: "header"
        description: "New # of likes"
        required: true
        type: "integer"
      responses:
        '200':
          description: "search results matching criteria"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthurized request"
        "404":
          description: "User or Video not found"
      security:
      - session_cookie: []
    delete:
      tags:
      - "video"
      summary: "Deletes a video for the user"
      description: ""
      operationId: "delVideoById"
      parameters:
      - name: "username"
        in: "path"
        description: "User id"
        required: true
        type: "string"
      - name: "videoId"
        in: "path"
        description: "Video id to delete"
        required: true
        type: "string"
      responses:
        '200':
          description: "search results matching criteria"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthurized request"
        "404":
          description: "User or Video not found"
      security:
      - session_cookie: []



  /user/{username}/videolist:
    post:
      tags:
      - "videolist"
      summary: "Create a video list for a user"
      description: "Create a video list for a user"
      operationId: "createVideoList"
      parameters:
        - in: "path"
          name: "username"
          description: "The id that needs to be fetched."
          required: true
          type: "string"
        - in: "body"
          name: "body"
          description: "Created videoList object"
          required: true
          schema:
            $ref: '#/definitions/VideoList'
      responses:
        '201':
          description: "created"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthurized request"
        "404":
          description: "User not found"
      security:
      - session_cookie: []
    get:
      tags:
        - "videolist"
      summary: "Get all the videolists of a user"
      description: "Get all the videolists of a user"
      operationId: "getUserVideoList"
      parameters:
      - name: "username"
        in: "path"
        description: "User name"
        required: true
        type: "string"
      responses:
        '200':
          description: "search results matching criteria"
          schema:
            items:
              $ref: '#/definitions/Video'
        "400":
          description: "Bad Request"
        "404":
          description: "User not found"

  /user/{username}/videoList/{videoListId}:
    get:
      tags:
      - "videolist"
      summary: "Get the info (videos) of a videolist"
      description: "Get the info (videos) of a videolist"
      operationId: "getVideoByVideoList"
      parameters:
      - name: "username"
        in: "path"
        description: "User name"
        required: true
        type: "string"
      - name: "videoListId"
        in: "path"
        description: "VideoList id to get"
        required: true
        type: "string"
      responses:
        '200':
          description: "search results matching criteria"
          schema:
            items:
              $ref: '#/definitions/Video'
        "400":
          description: "Bad Request"
        "404":
          description: "User or VideoList not found"
    put:
      deprecated: true
      tags:
        - "videolist"
      summary: "Update existing videolist info"
      description: "Update existing videolist info"
      operationId: "updateVideoList"

      parameters:
      - name: "username"
        in: "path"
        description: "User name"
        required: true
        type: "string"
      - name: "videoListId"
        in: "path"
        description: "Video id to get"
        required: true
        type: "string"
      - in: "body"
        name: "body"
        description: "Updated user object"
        required: true
        schema:
          $ref: '#/definitions/VideoList'
      responses:
        '200':
          description: "Updated"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthurized request"
        "404":
          description: "User or VideoList not found"
      security:
      - session_cookie: []
    delete:
      tags:
        - "videolist"
      summary: "Deletes a videolist for the user"
      description: ""
      operationId: "deleteVideoList"
      parameters:
      - name: "username"
        in: "path"
        description: "User name"
        required: true
        type: "string"
      - name: "videoListId"
        in: "path"
        description: "Video List Id to delete"
        required: true
        type: "string"
      responses:
        '200':
          description: "Deleted"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthurized request"
        "404":
          description: "User or VideoList not found"
      security:
      - session_cookie: []
      
  /user/{username}/videoList/{videoListId}/addVideo:
    post:
      tags:
      - "videolist"
      summary: "Add video to a videolist"
      operationId: "addVideoToVideoList"
      parameters:
      - name: "username"
        in: "path"
        description: "User name"
        required: true
        type: "string"
      - name: "videoListId"
        in: "path"
        description: "Video id to get"
        required: true
        type: "string"
      - name: "body"
        in: "body"
        description: "Created videoList object"
        required: true
        schema:
          $ref: '#/definitions/Video_VideoList'
      responses:
        '200':
          description: "Added"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthurized request"
        "404":
          description: "User or VideoList or Video not found"
      security:
      - session_cookie: []
      
  /user/{username}/videoList/{videoListId}/deleteVideo:
    delete:
      tags:
        - "videolist"
      summary: "Delete a video from a videolist"
      description: "Delete a video from a videolist"
      operationId: "delVideoFromVideoList"
      parameters:
      - name: "username"
        in: "path"
        description: "User name"
        required: true
        type: "string"
      - name: "videoListId"
        in: "path"
        description: "Video List Id to delete"
        required: true
        type: "string"
      - name: "body"
        in: "body"
        description: "Created videoList object"
        required: true
        schema:
          $ref: '#/definitions/Video_VideoList'
      responses:
        '200':
          description: "Deleted"
        "400":
          description: "Bad Request"
        "401":
          description: "Unauthurized request"
        "404":
          description: "User or VideoList or Video not found"
      security:
      - session_cookie: []

securityDefinitions:
  session_cookie:
    type: "apiKey"
    name: "api_key"
    in: "header"

definitions:
    User:
      type: "object"
      required:
        - "userId"
        - "userName"
        - "userPwd"
        - "userEmail"
        - "createDate"
      properties:
        userId:
          type: "string"
          example: "fb2feabd-aac2-11ec-b658-525400a3fea8"
        userName:
          type: "string"
          example: 'gwargura'
        userPwd:
          type: "string"
          example: 'sh0rkAAAA++'
        userEmail:
          type: "string"
          example: 'gwar__gura@gmail.com'
        userCountry:
          type: "string"
          example: 'CANADA'
        createDate:
          type: "string"
          pattern: "YYYY-MM-DD"
          example: '2022-02-31'
          
    Video:
      type: "object"
      required:
        - "videoId"
        - "videoSize"
        - "likes"
        - "createDate"
        - "userId"
      properties:
        videoId:
          type: "string"
          example: "574dc2c0-aaf7-11ec-b658-525400a3fea8"
        videoSize:
          type: "integer"
          example: 100
        likes:
          type: "integer"
          example: 0
        createDate:
          type: "string"
          pattern: "YYYY-MM-DD"
          example: '2022-02-31'
        userId:
          type: "string"
          example: "fb2feabd-aac2-11ec-b658-525400a3fea8"
          
    VideoList:
      type: "object"
      required:
        - "videoListId"
        - "videoListTitle"
        - "userId"
      properties:
        videoListId:
          type: "string"
          example: "7f70f65f-ac5f-11ec-b658-525400a3fea8"
        videoListTitle:
          type: "string"
          example: 'holo_EN'
        description:
          type: "string"
          example: 'personal album'
        userId:
          type: "string"
          example: "fb2feabd-aac2-11ec-b658-525400a3fea8"
        
    Video_VideoList:
      type: "object"
      required:
        - "userId"
        - "videoId"
        - "videoListId"
      properties:
        userId:
          type: "string"
          example: "e1e858f0-aac2-11ec-b658-525400a3fea8"
        videoId:
          type: "string"
          example: "2f050dce-aaf0-11ec-b658-525400a3fea8"
        videoListId:
          type: "string"
          example: "b21224ab-ac70-11ec-b658-525400a3fea8"
